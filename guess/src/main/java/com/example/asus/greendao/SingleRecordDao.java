package com.example.asus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.asus.greendao.entity.SingleRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SINGLE_RECORD".
*/
public class SingleRecordDao extends AbstractDao<SingleRecord, Long> {

    public static final String TABLENAME = "SINGLE_RECORD";

    /**
     * Properties of entity SingleRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USERID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Sum1 = new Property(3, int.class, "sum1", false, "SUM1");
        public final static Property Sum2 = new Property(4, int.class, "sum2", false, "SUM2");
        public final static Property Sum3 = new Property(5, int.class, "sum3", false, "SUM3");
        public final static Property Rsum1 = new Property(6, int.class, "rsum1", false, "RSUM1");
        public final static Property Rsum2 = new Property(7, int.class, "rsum2", false, "RSUM2");
        public final static Property Rsum3 = new Property(8, int.class, "rsum3", false, "RSUM3");
        public final static Property SumScore1 = new Property(9, int.class, "sumScore1", false, "SUMSCORE1");
        public final static Property SumScore2 = new Property(10, int.class, "sumScore2", false, "SUMSCORE2");
        public final static Property SumScore3 = new Property(11, int.class, "sumScore3", false, "SUMSCORE3");
        public final static Property Average1 = new Property(12, int.class, "average1", false, "AVERAGE1");
        public final static Property Average2 = new Property(13, int.class, "average2", false, "AVERAGE2");
        public final static Property Average3 = new Property(14, int.class, "average3", false, "AVERAGE3");
    }


    public SingleRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SingleRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SINGLE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userId
                "\"TYPE\" TEXT," + // 2: type
                "\"SUM1\" INTEGER NOT NULL ," + // 3: sum1
                "\"SUM2\" INTEGER NOT NULL ," + // 4: sum2
                "\"SUM3\" INTEGER NOT NULL ," + // 5: sum3
                "\"RSUM1\" INTEGER NOT NULL ," + // 6: rsum1
                "\"RSUM2\" INTEGER NOT NULL ," + // 7: rsum2
                "\"RSUM3\" INTEGER NOT NULL ," + // 8: rsum3
                "\"SUMSCORE1\" INTEGER NOT NULL ," + // 9: sumScore1
                "\"SUMSCORE2\" INTEGER NOT NULL ," + // 10: sumScore2
                "\"SUMSCORE3\" INTEGER NOT NULL ," + // 11: sumScore3
                "\"AVERAGE1\" INTEGER NOT NULL ," + // 12: average1
                "\"AVERAGE2\" INTEGER NOT NULL ," + // 13: average2
                "\"AVERAGE3\" INTEGER NOT NULL );"); // 14: average3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SINGLE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SingleRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getSum1());
        stmt.bindLong(5, entity.getSum2());
        stmt.bindLong(6, entity.getSum3());
        stmt.bindLong(7, entity.getRsum1());
        stmt.bindLong(8, entity.getRsum2());
        stmt.bindLong(9, entity.getRsum3());
        stmt.bindLong(10, entity.getSumScore1());
        stmt.bindLong(11, entity.getSumScore2());
        stmt.bindLong(12, entity.getSumScore3());
        stmt.bindLong(13, entity.getAverage1());
        stmt.bindLong(14, entity.getAverage2());
        stmt.bindLong(15, entity.getAverage3());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SingleRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getSum1());
        stmt.bindLong(5, entity.getSum2());
        stmt.bindLong(6, entity.getSum3());
        stmt.bindLong(7, entity.getRsum1());
        stmt.bindLong(8, entity.getRsum2());
        stmt.bindLong(9, entity.getRsum3());
        stmt.bindLong(10, entity.getSumScore1());
        stmt.bindLong(11, entity.getSumScore2());
        stmt.bindLong(12, entity.getSumScore3());
        stmt.bindLong(13, entity.getAverage1());
        stmt.bindLong(14, entity.getAverage2());
        stmt.bindLong(15, entity.getAverage3());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SingleRecord readEntity(Cursor cursor, int offset) {
        SingleRecord entity = new SingleRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.getInt(offset + 3), // sum1
            cursor.getInt(offset + 4), // sum2
            cursor.getInt(offset + 5), // sum3
            cursor.getInt(offset + 6), // rsum1
            cursor.getInt(offset + 7), // rsum2
            cursor.getInt(offset + 8), // rsum3
            cursor.getInt(offset + 9), // sumScore1
            cursor.getInt(offset + 10), // sumScore2
            cursor.getInt(offset + 11), // sumScore3
            cursor.getInt(offset + 12), // average1
            cursor.getInt(offset + 13), // average2
            cursor.getInt(offset + 14) // average3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SingleRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSum1(cursor.getInt(offset + 3));
        entity.setSum2(cursor.getInt(offset + 4));
        entity.setSum3(cursor.getInt(offset + 5));
        entity.setRsum1(cursor.getInt(offset + 6));
        entity.setRsum2(cursor.getInt(offset + 7));
        entity.setRsum3(cursor.getInt(offset + 8));
        entity.setSumScore1(cursor.getInt(offset + 9));
        entity.setSumScore2(cursor.getInt(offset + 10));
        entity.setSumScore3(cursor.getInt(offset + 11));
        entity.setAverage1(cursor.getInt(offset + 12));
        entity.setAverage2(cursor.getInt(offset + 13));
        entity.setAverage3(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SingleRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SingleRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SingleRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

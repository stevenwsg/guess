package com.example.asus.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.asus.greendao.entity.DoubleRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOUBLE_RECORD".
*/
public class DoubleRecordDao extends AbstractDao<DoubleRecord, Long> {

    public static final String TABLENAME = "DOUBLE_RECORD";

    /**
     * Properties of entity DoubleRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USERID");
        public final static Property TargetId = new Property(2, String.class, "targetId", false, "TARGETID");
        public final static Property Diffcult = new Property(3, String.class, "diffcult", false, "DIFFCULT");
        public final static Property Time = new Property(4, java.util.Date.class, "time", false, "TIME");
        public final static Property Score = new Property(5, int.class, "score", false, "SCORE");
    }


    public DoubleRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DoubleRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOUBLE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userId
                "\"TARGETID\" TEXT," + // 2: targetId
                "\"DIFFCULT\" TEXT," + // 3: diffcult
                "\"TIME\" INTEGER," + // 4: time
                "\"SCORE\" INTEGER NOT NULL );"); // 5: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOUBLE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DoubleRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(3, targetId);
        }
 
        String diffcult = entity.getDiffcult();
        if (diffcult != null) {
            stmt.bindString(4, diffcult);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time.getTime());
        }
        stmt.bindLong(6, entity.getScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DoubleRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(3, targetId);
        }
 
        String diffcult = entity.getDiffcult();
        if (diffcult != null) {
            stmt.bindString(4, diffcult);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time.getTime());
        }
        stmt.bindLong(6, entity.getScore());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DoubleRecord readEntity(Cursor cursor, int offset) {
        DoubleRecord entity = new DoubleRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // diffcult
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // time
            cursor.getInt(offset + 5) // score
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DoubleRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiffcult(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setScore(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DoubleRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DoubleRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DoubleRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
